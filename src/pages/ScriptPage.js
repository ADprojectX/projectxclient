import React, {useState} from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';
import Cookies from 'js-cookie';

const API_BASE_URL = 'http://localhost:8000/api';

function ScriptPage() {
    const navigate = useNavigate();
    const { fromTitlePage } = useParams(); // Check if user came from the TitlePage
    const [errorMessage, setErrorMessage] = useState('');
    const [userName, setUserName] = useState(null);
    const [title, setTitle] = useState('');
    const [script, setScript] = useState('');
  
    React.useEffect(() => {
        axios.get(`${API_BASE_URL}/dashboard/`, { withCredentials: true })
        .then((response) => {
          setUserName(response.data.username);
          if (fromTitlePage === 'generated') {
            // Fetch the script generated by the backend based on the title
            fetchScriptFromBackend();
          }
        })
        .catch((error) => {
          setErrorMessage('unauthorized');
          navigate('/login');
          console.log(error);
        });
    }, [fromTitlePage]);
  
  
    const handleLogoutClick = () => {
      let data = { token: Cookies.get('jwt') };
      axios.post(`${API_BASE_URL}/logout/`, data, { withCredentials: true })
        .then((response) => {
          Cookies.remove('jwt', { domain: 'localhost', path: '/', secure: true });
          Cookies.remove('csrftoken', { domain: 'localhost', path: '/', secure: true });
          console.log('logout_successful');
          navigate('/login');
        })
        .catch((error) => {
          setErrorMessage('cannot logout');
          console.log(error);
        });
    };

    const fetchScriptFromBackend = () => {
        // Make a request to the backend to fetch the script based on the title
        axios.get(`${API_BASE_URL}/generate-script?title=${title}`, { withCredentials: true })
          .then((response) => {
            setScript(response.data.script);
          })
          .catch((error) => {
            setErrorMessage('script generation failed');
            console.log(error);
          });
      };
    
      const handleScriptChange = (e) => {
        setScript(e.target.value);
      };
    
      const handleSubmit = (e) => {
        e.preventDefault();
        if (script.trim() === '') {
            setErrorMessage('Script cannot be empty');
            return;
          }
        // Perform the desired action with the script
        console.log('Script:', script);
    
        // TODO: SEND THIS SCRIPT TO THE BACKEND---------------------
    
        // Reset the setScript field
        setScript('');
    
        navigate('/voice');
    
      };

    return(
        <div className="script-page">
        <h2>Script Page</h2>
        <h1>Hello, {userName}</h1>
        <p>Welcome to the Script Page</p>
        <button onClick={handleLogoutClick}>Logout</button>
        <p></p>
        {fromTitlePage === 'generated' && script ? (
          <form onSubmit={handleSubmit}>
            <textarea
              value={script}
              onChange={handleScriptChange}
              placeholder="Enter Script"
            />
            <button type="submit"> Submit </button>
          </form>
        ) : (
            <div>
            <textarea
              value={script}
              onChange={handleScriptChange}
              placeholder="Enter Script"
            />
            <button onClick={handleSubmit}>Submit</button>
          </div>
        )}
        {errorMessage && <p className="error">{errorMessage}</p>}
      </div>
    );
}

export default ScriptPage;